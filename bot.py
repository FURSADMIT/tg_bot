import os
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = os.getenv('TELEGRAM_BOT_TOKEN') or "–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê"
BOT_NAME = "@QaPollsBot"

# –ú–µ–Ω—é –∏ –≤–æ–ø—Ä–æ—Å—ã
main_menu = [
    [KeyboardButton("–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç üöÄ"), KeyboardButton("–û –∫—É—Ä—Å–µ ‚ú®")],
    [KeyboardButton("–ü–æ–º–æ—â—å ‚ùì")]
]
main_markup = ReplyKeyboardMarkup(main_menu, resize_keyboard=True)

questions = [
    "1. –ó–∞–º–µ—á–∞—é –æ–ø–µ—á–∞—Ç–∫–∏ –≤ —Ç–µ–∫—Å—Ç–∞—Ö",
    "2. –õ—é–±–ª—é —Ä–µ—à–∞—Ç—å –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏",
    "3. –ú–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—é –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ",
    "4. –ò–∑—É—á–∞—é –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π",
    "5. –ò–Ω—Ç–µ—Ä–µ—Å—É—é—Å—å IT –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏"
]
answers_markup = ReplyKeyboardMarkup([["1 üòû", "2 üòê", "3 üòä", "4 üòÉ", "5 ü§©"]], resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø {BOT_NAME}.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_markup
    )

async def about_course(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ú® *–ö—É—Ä—Å –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é* ‚ú®\n\n"
        "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å –Ω—É–ª—è –¥–æ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.\n\n"
        "–ü–æ–¥—Ä–æ–±–Ω–µ–µ: @Dmitrii_Fursa8",
        parse_mode="Markdown",
        reply_markup=main_markup
    )

async def start_test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['answers'] = []
    context.user_data['question'] = 0
    await ask_question(update, context)
    return 1

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q_num = context.user_data['question']
    await update.message.reply_text(
        questions[q_num],
        reply_markup=answers_markup
    )

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        answer = update.message.text.split()[0]
        if not answer.isdigit() or not 1 <= int(answer) <= 5:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç 1 –¥–æ 5")
            return 1
        
        context.user_data['answers'].append(int(answer))
        context.user_data['question'] += 1
        
        if context.user_data['question'] < len(questions):
            await ask_question(update, context)
            return 1
        
        total = sum(context.user_data['answers'])
        await update.message.reply_text(
            f"üîç –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {total}/25\n\n" +
            ("–û—Ç–ª–∏—á–Ω–æ! üöÄ" if total >= 20 else
             "–•–æ—Ä–æ—à–æ! üëç" if total >= 15 else
             "–ï—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏! üí™"),
            reply_markup=main_markup
        )
    except Exception as e:
        logger.error(f"Error: {str(e)}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=main_markup
        )
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ë–Ω", reply_markup=main_markup)
    return ConversationHandler.END

def main():
    app = Application.builder().token(TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex("^–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç üöÄ$"), start_test),
            CommandHandler("start", start_test)
        ],
        states={
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("about", about_course))
    app.add_handler(MessageHandler(filters.Regex("^–û –∫—É—Ä—Å–µ ‚ú®$"), about_course))
    app.add_handler(CommandHandler("help", start))
    app.add_handler(MessageHandler(filters.Regex("^–ü–æ–º–æ—â—å ‚ùì$"), start))
    
    app.run_polling()

if __name__ == "__main__":
    logger.info("Starting bot...")
    main()
