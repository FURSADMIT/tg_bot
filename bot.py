import os
import logging
import threading
import requests
import time
from flask import Flask, jsonify, request
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
PORT = int(os.environ.get('PORT', 10000))
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
SECRET_TOKEN = os.getenv('SECRET_TOKEN', 'default-secret-token')
BOT_NAME = "@QaPollsBot"
TG_LINK = "https://t.me/Dmitrii_Fursa8"
VK_LINK = "https://m.vk.com/id119459855"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
application = None

@app.route('/health')
def health():
    return jsonify({"status": "ok", "bot": BOT_NAME}), 200

@app.route('/')
def home():
    return jsonify({"message": "QA Polls Bot is running"}), 200

@app.route('/webhook', methods=['POST'])
async def webhook():
    if request.headers.get('X-Telegram-Bot-Api-Secret-Token') != SECRET_TOKEN:
        return jsonify({"status": "forbidden"}), 403
    
    json_data = request.get_json()
    update = Update.de_json(json_data, application.bot)
    await application.update_queue.put(update)
    return jsonify({"status": "ok"}), 200

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
QUESTIONS = 1

# –í–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞
questions = [
    "*1.* *–ó–∞–º–µ—á–∞—é –æ–ø–µ—á–∞—Ç–∫–∏ –≤ —Ç–µ–∫—Å—Ç–∞—Ö*",
    "*2.* *–õ—é–±–ª—é —Ä–µ—à–∞—Ç—å –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏ –∏ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏*",
    "*3.* *–ú–æ–≥—É –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ*",
    "*4.* *–ò–∑—É—á–∞—è –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —Å—Ç–∞—Ä–∞—é—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤–æ –≤—Å–µ—Ö –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏—è—Ö*",
    "*5.* *–ù–∞—Å–∫–æ–ª—å–∫–æ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ IT-—Å—Ñ–µ—Ä–∞?*"
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
reply_keyboard = [["1 üòû", "2 üòê", "3 üòä", "4 üòÉ", "5 ü§©"]]
markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)

main_menu_keyboard = [
    [KeyboardButton("–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç üöÄ"), KeyboardButton("–û –∫—É—Ä—Å–µ ‚ÑπÔ∏è")],
    [KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–æ—Ç–∞ ‚úÖ")]
]
main_menu_markup = ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True)

def keep_alive():
    """–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    time.sleep(15)
    logger.info("Starting keep-alive service")
    while True:
        try:
            if WEBHOOK_URL:
                requests.get(f"{WEBHOOK_URL}/health", timeout=10)
        except Exception as e:
            logger.error(f"Keep-alive error: {str(e)}")
        time.sleep(300)

async def post_init(application: Application) -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±—Ö—É–∫–∞"""
    await application.bot.set_webhook(
        url=f"{WEBHOOK_URL}/webhook",
        secret_token=SECRET_TOKEN,
        drop_pending_updates=True
    )
    await application.bot.set_my_commands([
        ("start", "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç"),
        ("about", "–û –∫—É—Ä—Å–µ"),
        ("health", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–æ—Ç–∞")
    ])

def create_telegram_app():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram"""
    global application
    application = Application.builder().token(TOKEN).post_init(post_init).build()
    
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(filters.Regex("^–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç üöÄ$"), start)
        ],
        states={
            QUESTIONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("about", about_course))
    application.add_handler(MessageHandler(filters.Regex("^–û –∫—É—Ä—Å–µ ‚ÑπÔ∏è$"), about_course))
    application.add_handler(CommandHandler("health", check_health))
    application.add_handler(MessageHandler(filters.Regex("^–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–æ—Ç–∞ ‚úÖ$"), check_health))
    application.add_error_handler(error_handler)
    
    return application

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        user = update.message.from_user
        context.user_data.clear()
        context.user_data['answers'] = []
        context.user_data['current_question'] = 0
        
        welcome_text = (
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø {BOT_NAME}, –ø–æ–º–æ–≥—É –æ—Ü–µ–Ω–∏—Ç—å —Ç–≤–æ–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.\n\n"
            "–û—Ç–≤–µ—Ç—å –Ω–∞ 5 —Ç–µ–∑–∏—Å–æ–≤ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5, –≥–¥–µ:\n"
            "1 üòû - —Å–æ–≤—Å–µ–º –Ω–µ –æ–±–æ –º–Ω–µ\n"
            "5 ü§© - —ç—Ç–æ —Ç–æ—á–Ω–æ –ø—Ä–æ –º–µ–Ω—è\n"
        )
        
        await update.message.reply_text(
            welcome_text,
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardRemove()
        )
        
        await ask_question(update, context)
        return QUESTIONS
        
    except Exception as e:
        logger.error(f"Start error: {str(e)}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=main_menu_markup
        )
        return ConversationHandler.END

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current = context.user_data['current_question']
    await update.message.reply_text(
        questions[current],
        reply_markup=markup,
        parse_mode="Markdown"
    )

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        answer = update.message.text.split()[0]
        if not answer.isdigit() or int(answer) < 1 or int(answer) > 5:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç 1 –¥–æ 5")
            await ask_question(update, context)
            return QUESTIONS
        
        context.user_data['answers'].append(int(answer))
        context.user_data['current_question'] += 1
        
        if context.user_data['current_question'] < len(questions):
            await ask_question(update, context)
            return QUESTIONS
        
        await show_results(update, context)
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"Handle answer error: {str(e)}")
        await update.message.reply_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.",
            reply_markup=main_menu_markup
        )
        return ConversationHandler.END

async def show_results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    total = sum(context.user_data['answers'])
    result = "üîç *–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã* üîç\n\n"
    
    if total >= 20:
        result += (
            "üöÄ *–û—Ç–ª–∏—á–Ω—ã–µ –∑–∞–¥–∞—Ç–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞!*\n\n"
            "–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã—Å–æ–∫—É—é —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é. "
            "–ß—Ç–æ–±—ã –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —ç—Ç–æ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é:\n\n"
            f"üëâ –ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ Telegram: [@Dmitrii_Fursa8]({TG_LINK})\n"
            f"üëâ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –º–µ–Ω—è –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: [Dmitrii Fursa]({VK_LINK})"
        )
    elif total >= 15:
        result += (
            "üåü *–•–æ—Ä–æ—à–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª!*\n\n"
            "–£ —Ç–µ–±—è –µ—Å—Ç—å –±–∞–∑–æ–≤—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞. "
            "–ß—Ç–æ–±—ã —Ä–∞–∑–≤–∏—Ç—å –∏—Ö –¥–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è:\n\n"
            f"üëâ –ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ Telegram: [@Dmitrii_Fursa8]({TG_LINK})\n"
            f"üëâ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –º–µ–Ω—è –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: [Dmitrii Fursa]({VK_LINK})"
        )
    else:
        result += (
            "üí° *–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —Ç–≤–æ–∏–º –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–∑–≤–∞–Ω–∏–µ–º, –Ω–æ —ç—Ç–æ –Ω–µ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ IT –Ω–µ –¥–ª—è —Ç–µ–±—è!*\n\n"
            "–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å:\n"
            "‚Ä¢ –°—Ç–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–æ–º –∏ –≤–æ–π—Ç–∏ –≤ IT\n"
            "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é\n"
            "‚Ä¢ –û—Å–≤–æ–∏—Ç—å –Ω–∞–≤—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–∫—Ä–æ—é—Ç –¥–≤–µ—Ä–∏ –≤ –º–∏—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π\n\n"
            f"üëâ –ü–∏—à–∏ –º–Ω–µ –≤ Telegram: [@Dmitrii_Fursa8]({TG_LINK})\n"
            f"üëâ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –º–µ–Ω—è –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: [Dmitrii Fursa]({VK_LINK})"
        )
    
    await update.message.reply_text(
        result,
        parse_mode="Markdown",
        disable_web_page_preview=True,
        reply_markup=main_menu_markup
    )

async def about_course(update: Update, context: ContextTypes.DEFAULT_TYPE):
    about_text = """
üåü *–û –∫—É—Ä—Å–µ* üåü

–Ø –ø—Ä–æ—à–µ–ª –ø—É—Ç—å –æ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞ (Adidas/Reebok) –¥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ–¥–Ω–æ–π –∏–∑ –ª—É—á—à–∏—Ö IT-–∫–æ–º–ø–∞–Ω–∏–π!

üîç *–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–∞–∂–¥–æ–º—É –ø–æ—Ä–æ–≥ –≤—Ö–æ–¥–∞ –≤ IT.*

*–ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç?*
- –¢–µ–æ—Ä–∏—è –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–Ω—è—Ç–∏—è (–æ–Ω–ª–∞–π–Ω)
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö –æ–±—É—á–µ–Ω–∏—è
- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º –∏ —É—Å–ø–µ—à–Ω–æ–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ

üöÄ *–ù—É –∞ –ø–æ—Å–ª–µ:*
- –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ IT-–∫–æ–º–ø–∞–Ω–∏–π
- –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è –ó–ü, –î–ú–°, –ª—å–≥–æ—Ç—ã
- –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã
- –∫—Ä—É—Ç—ã–µ –æ—Ñ–∏—Å—ã —Å —Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–º–∏ –∑–∞–ª–∞–º–∏, –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –µ–¥–æ–π, –≤–µ—á–µ—Ä–∏–Ω–∫–∞–º–∏, –ø—Å–∏—Ö–æ–ª–æ–≥–∞–º–∏
- –∏ –±–æ–ª—å—à–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–∞ –±—É–¥—É—â–µ–µ.

–ó–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏ –ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ Telegram: [@Dmitrii_Fursa8](https://t.me/Dmitrii_Fursa8)
"""
    await update.message.reply_text(
        about_text,
        parse_mode="Markdown",
        disable_web_page_preview=True,
        reply_markup=main_menu_markup
    )

async def check_health(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"‚úÖ {BOT_NAME} —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!",
        reply_markup=main_menu_markup
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ë–Ω",
        reply_markup=main_menu_markup
    )
    return ConversationHandler.END

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error("Error:", exc_info=context.error)
    if update and update.effective_message:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üò¢ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu_markup
        )

def run_flask():
    app.run(host='0.0.0.0', port=PORT)

async def run_bot():
    global application
    application = create_telegram_app()
    await application.initialize()
    await application.start()
    logger.info("Bot started")

async def shutdown():
    global application
    if application:
        await application.stop()
        await application.shutdown()

def main():
    if WEBHOOK_URL:
        threading.Thread(target=keep_alive, daemon=True).start()
    
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    try:
        loop.run_until_complete(run_bot())
        run_flask()
    except KeyboardInterrupt:
        loop.run_until_complete(shutdown())
    finally:
        loop.close()

if __name__ == "__main__":
    import asyncio
    logger.info(f"Starting {BOT_NAME}")
    main()
