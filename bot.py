import os
import logging
import threading
import requests
import time
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackContext
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
WEBHOOK_URL = os.getenv('WEBHOOK_URL', '').rstrip('/')  # –£–¥–∞–ª—è–µ–º —Å–ª—ç—à –≤ –∫–æ–Ω—Ü–µ
SECRET_TOKEN = os.getenv('SECRET_TOKEN', 'default-secret-token')
BOT_NAME = "@QaPollsBot"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
QUESTIONS, NAME, EMAIL = range(3)

# –í–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞
questions = [
    "–ó–∞–º–µ—á–∞–µ—Ç–µ –ª–∏ –≤—ã –æ–ø–µ—á–∞—Ç–∫–∏ –≤ —Ç–µ–∫—Å—Ç–∞—Ö?",
    "–õ—é–±–∏—Ç–µ –ª–∏ –≤—ã —Ä–µ—à–∞—Ç—å –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏ –∏ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏?",
    "–ö–∞–∫ –≤—ã —Ä–µ–∞–≥–∏—Ä—É–µ—Ç–µ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ?",
    "–ò–∑—É—á–∞—è –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –≤—ã —Å—Ç–∞—Ä–∞–µ—Ç–µ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤–æ –≤—Å–µ—Ö –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏—è—Ö?",
    "–ù–∞—Å–∫–æ–ª—å–∫–æ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ IT-—Å—Ñ–µ—Ä–∞?"
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
reply_keyboard = [["1", "2", "3", "4", "5"]]
markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)

async def health(update: Update, context: CallbackContext) -> None:
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    await update.message.reply_text(f"‚úÖ {BOT_NAME} —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!\n"
                                 f"–†–µ–∂–∏–º: {'WEBHOOK' if WEBHOOK_URL else 'POLLING'}")

def keep_awake(app_url):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ Render"""
    # –î–∞–¥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –≤—Ä–µ–º—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –ø–∏–Ω–≥–æ–º
    time.sleep(15)
    
    logger.info("Starting keep-alive service")
    
    while True:
        try:
            if app_url:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π URL –±–µ–∑ /health –¥–ª—è –ø–∏–Ω–≥–∞
                response = requests.get(app_url, timeout=5)
                logger.info(f"Keep-alive ping to {app_url}, status: {response.status_code}")
        except Exception as e:
            logger.error(f"Keep-alive error: {str(e)}")
        
        # –£–≤–µ–ª–∏—á–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ 10 –º–∏–Ω—É—Ç (600 —Å–µ–∫—É–Ω–¥)
        time.sleep(600)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    logger.info(f"User {user.id} started conversation")
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø {BOT_NAME}, –ø–æ–º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–≤–æ—é –ø—Ä–µ–¥—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ü–û.\n\n"
        "–û—Ç–≤–µ—Ç—å –Ω–∞ 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5, –≥–¥–µ:\n"
        "1 - —Å–æ–≤—Å–µ–º –Ω–µ –æ–±–æ –º–Ω–µ\n"
        "5 - —ç—Ç–æ —Ç–æ—á–Ω–æ –ø—Ä–æ –º–µ–Ω—è\n\n"
        "–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å:\n" + questions[0],
        reply_markup=markup
    )
    return QUESTIONS

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    answer = update.message.text
    if not answer.isdigit() or int(answer) < 1 or int(answer) > 5:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 5", reply_markup=markup)
        return QUESTIONS
    
    context.user_data.setdefault('answers', []).append(int(answer))
    question_index = len(context.user_data['answers'])
    
    if question_index < len(questions):
        await update.message.reply_text(questions[question_index], reply_markup=markup)
        return QUESTIONS
    
    await update.message.reply_text(
        "–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=ReplyKeyboardRemove()
    )
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    return EMAIL

async def get_email(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    email = update.message.text
    context.user_data['email'] = email
    
    # –†–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    total = sum(context.user_data['answers'])
    result = "üîç –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã üîç\n\n"
    
    if total >= 6:
        result += "–û—Ç–ª–∏—á–Ω—ã–µ –∑–∞–¥–∞—Ç–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞! –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–π—Ç–∏ –Ω–∞—à –∫—É—Ä—Å:\nhttps://example.com/course"
    elif total == 5:
        result += "–ï—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª! –†–∞–∑–≤–∏–≤–∞–π—Ç–µ –Ω–∞–≤—ã–∫–∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."
    else:
        result += "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –≤–∞—à–∏–º –ø—Ä–∏–∑–≤–∞–Ω–∏–µ–º, –Ω–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—à –≤–≤–æ–¥–Ω—ã–π —É—Ä–æ–∫:\nhttps://example.com/trial"
    
    await update.message.reply_text(result)
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
    await update.message.reply_text(
        "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â–µ —Ä–∞–∑?",
        reply_markup=ReplyKeyboardMarkup([["/start"]], one_time_keyboard=True)
    )
    
    logger.info(f"User completed test: {context.user_data}")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=ReplyKeyboardRemove())
    logger.info("Test canceled by user")
    return ConversationHandler.END

def main() -> None:
    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º health-—ç–Ω–¥–ø–æ–∏–Ω—Ç
    application.add_handler(CommandHandler("health", health))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            QUESTIONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_email)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    
    application.add_handler(conv_handler)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—Ç –¥–ª—è Render
    port = int(os.environ.get("PORT", 10000))
    
    if WEBHOOK_URL:
        logger.info(f"Starting bot in WEBHOOK mode on port {port}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º keep-alive –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(
            target=keep_awake,
            args=(WEBHOOK_URL,),
            daemon=True
        ).start()
        
        application.run_webhook(
            listen="0.0.0.0",
            port=port,
            webhook_url=WEBHOOK_URL,
            secret_token=SECRET_TOKEN,
            drop_pending_updates=True
        )
    else:
        logger.info("Starting bot in POLLING mode")
        application.run_polling()

if __name__ == "__main__":
    logger.info(f"Starting {BOT_NAME} with token: {TOKEN[:5]}...{TOKEN[-5:]}")
    logger.info(f"WEBHOOK_URL: {WEBHOOK_URL or 'Not set, using POLLING'}")
    main()
