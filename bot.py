import os
import logging
import asyncio
from flask import Flask, jsonify, request
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
PORT = int(os.environ.get('PORT', 10000))
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
SECRET_TOKEN = os.getenv('SECRET_TOKEN', 'default-secret-token')
BOT_NAME = "@QaPollsBot"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

app = Flask(__name__)
application = None

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤–æ–ø—Ä–æ—Å—ã
QUESTIONS = 1
questions = [
    "1. –ó–∞–º–µ—á–∞—é –æ–ø–µ—á–∞—Ç–∫–∏ –≤ —Ç–µ–∫—Å—Ç–∞—Ö",
    "2. –õ—é–±–ª—é —Ä–µ—à–∞—Ç—å –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏",
    "3. –ú–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—é –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ",
    "4. –ò–∑—É—á–∞—é –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π",
    "5. –ò–Ω—Ç–µ—Ä–µ—Å—É—é—Å—å IT –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏"
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
reply_keyboard = [["1 üòû", "2 üòê", "3 üòä", "4 üòÉ", "5 ü§©"]]
markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)

main_menu_keyboard = [
    [KeyboardButton("–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç üöÄ"), KeyboardButton("–û –∫—É—Ä—Å–µ ‚ú®")],
    [KeyboardButton("–ü–æ–º–æ—â—å ‚ùì")]
]
main_menu_markup = ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True)

@app.route('/')
def home():
    return jsonify({"status": "ok"}), 200

@app.route('/health')
def health():
    return jsonify({"status": "healthy"}), 200

@app.route('/webhook', methods=['POST'])
async def webhook():
    if request.headers.get('X-Telegram-Bot-Api-Secret-Token') != SECRET_TOKEN:
        return jsonify({"status": "forbidden"}), 403
    
    json_data = request.get_json()
    update = Update.de_json(json_data, application.bot)
    await application.update_queue.put(update)
    return jsonify({"status": "ok"}), 200

async def post_init(app):
    await app.bot.set_webhook(
        url=f"{WEBHOOK_URL}/webhook",
        secret_token=SECRET_TOKEN,
        drop_pending_updates=True
    )
    await app.bot.set_my_commands([
        ("start", "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç"),
        ("about", "–û –∫—É—Ä—Å–µ"),
        ("help", "–ü–æ–º–æ—â—å")
    ])

def create_app():
    global application
    application = Application.builder().token(TOKEN).post_init(post_init).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start), MessageHandler(filters.Regex("^–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç üöÄ$"), start)],
        states={
            QUESTIONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("about", about_course))
    application.add_handler(MessageHandler(filters.Regex("^–û –∫—É—Ä—Å–µ ‚ú®$"), about_course))
    application.add_handler(CommandHandler("help", help_command))
    application.add_error_handler(error_handler)
    
    return application

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        context.user_data.clear()
        context.user_data['answers'] = []
        context.user_data['current_question'] = 0
        
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç! –Ø {BOT_NAME}, –ø–æ–º–æ–≥—É –æ—Ü–µ–Ω–∏—Ç—å —Ç–≤–æ–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.\n\n"
            "–û—Ç–≤–µ—Ç—å –Ω–∞ 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5:\n"
            "1 üòû - —Å–æ–≤—Å–µ–º –Ω–µ –æ–±–æ –º–Ω–µ\n"
            "5 ü§© - —ç—Ç–æ —Ç–æ—á–Ω–æ –ø—Ä–æ –º–µ–Ω—è",
            reply_markup=ReplyKeyboardRemove()
        )
        
        await ask_question(update, context)
        return QUESTIONS
    except Exception as e:
        logger.error(f"Start error: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current = context.user_data['current_question']
    await update.message.reply_text(questions[current], reply_markup=markup)

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        answer = update.message.text.split()[0]
        if not answer.isdigit() or int(answer) < 1 or int(answer) > 5:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç 1 –¥–æ 5")
            await ask_question(update, context)
            return QUESTIONS
        
        context.user_data['answers'].append(int(answer))
        context.user_data['current_question'] += 1
        
        if context.user_data['current_question'] < len(questions):
            await ask_question(update, context)
            return QUESTIONS
        
        await show_results(update, context)
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Handle answer error: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞.")
        return ConversationHandler.END

async def show_results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    total = sum(context.user_data['answers'])
    result = f"üîç –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {total}/25\n\n"
    result += "üöÄ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!" if total >= 20 else "üëç –•–æ—Ä–æ—à–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª!" if total >=15 else "üí° –ï—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏!"
    await update.message.reply_text(result, reply_markup=main_menu_markup)

async def about_course(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ú® –û –∫—É—Ä—Å–µ:\n\n"
        "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Å –Ω—É–ª—è.\n\n"
        "–ü–æ–¥—Ä–æ–±–Ω–µ–µ: @Dmitrii_Fursa8",
        reply_markup=main_menu_markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å:\n\n"
        "‚Ä¢ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç - /start\n"
        "‚Ä¢ –û –∫—É—Ä—Å–µ - /about\n"
        "‚Ä¢ –û—Ç–º–µ–Ω–∞ —Ç–µ—Å—Ç–∞ - /cancel",
        reply_markup=main_menu_markup
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ë–Ω", reply_markup=main_menu_markup)
    return ConversationHandler.END

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error("Error:", exc_info=context.error)
    if update and update.effective_message:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üò¢ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu_markup
        )

async def run_bot():
    global application
    application = create_app()
    await application.initialize()
    await application.start()
    logger.info("Bot started")

async def shutdown():
    global application
    if application:
        await application.stop()
        await application.shutdown()

def run_flask():
    app.run(host='0.0.0.0', port=PORT)

def main():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    try:
        loop.run_until_complete(run_bot())
        run_flask()
    except KeyboardInterrupt:
        logger.info("Shutting down...")
        loop.run_until_complete(shutdown())
    finally:
        loop.close()

if __name__ == "__main__":
    logger.info(f"Starting {BOT_NAME}")
    main()
