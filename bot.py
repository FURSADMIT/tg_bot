import os
import logging
import threading
import requests
import time
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackContext
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
WEBHOOK_URL = os.getenv('WEBHOOK_URL', '').rstrip('/')
SECRET_TOKEN = os.getenv('SECRET_TOKEN', 'default-secret-token')
BOT_NAME = "@QaPollsBot"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
QUESTIONS = 0  # –¢–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –≤–æ–ø—Ä–æ—Å—ã

# –í–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞
questions = [
    "–ó–∞–º–µ—á–∞–µ—Ç–µ –ª–∏ –≤—ã –æ–ø–µ—á–∞—Ç–∫–∏ –≤ —Ç–µ–∫—Å—Ç–∞—Ö?",
    "–õ—é–±–∏—Ç–µ –ª–∏ –≤—ã —Ä–µ—à–∞—Ç—å –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏ –∏ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏?",
    "–ö–∞–∫ –≤—ã —Ä–µ–∞–≥–∏—Ä—É–µ—Ç–µ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ?",
    "–ò–∑—É—á–∞—è –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –≤—ã —Å—Ç–∞—Ä–∞–µ—Ç–µ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤–æ –≤—Å–µ—Ö –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏—è—Ö?",
    "–ù–∞—Å–∫–æ–ª—å–∫–æ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ IT-—Å—Ñ–µ—Ä–∞?"
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
reply_keyboard = [["1", "2", "3", "4", "5"]]
markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)

async def health(update: Update, context: CallbackContext) -> None:
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    await update.message.reply_text(f"‚úÖ {BOT_NAME} —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!\n"
                                 f"–†–µ–∂–∏–º: {'WEBHOOK' if WEBHOOK_URL else 'POLLING'}")

def keep_awake(app_url):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ Render"""
    time.sleep(15)
    logger.info("Starting keep-alive service")
    
    while True:
        try:
            if app_url:
                response = requests.get(app_url, timeout=5)
                logger.info(f"Keep-alive ping to {app_url}, status: {response.status_code}")
        except Exception as e:
            logger.error(f"Keep-alive error: {str(e)}")
        time.sleep(600)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    logger.info(f"User {user.id} started conversation")
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã
    context.user_data.clear()
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø {BOT_NAME}, –ø–æ–º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–≤–æ—é –ø—Ä–µ–¥—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ü–û.\n\n"
        "–û—Ç–≤–µ—Ç—å –Ω–∞ 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5, –≥–¥–µ:\n"
        "1 - —Å–æ–≤—Å–µ–º –Ω–µ –æ–±–æ –º–Ω–µ\n"
        "5 - —ç—Ç–æ —Ç–æ—á–Ω–æ –ø—Ä–æ –º–µ–Ω—è\n\n"
        "–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å:\n" + questions[0],
        reply_markup=markup
    )
    return QUESTIONS

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    answer = update.message.text
    if not answer.isdigit() or int(answer) < 1 or int(answer) > 5:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 5", reply_markup=markup)
        return QUESTIONS
    
    context.user_data.setdefault('answers', []).append(int(answer))
    question_index = len(context.user_data['answers'])
    
    if question_index < len(questions):
        await update.message.reply_text(questions[question_index], reply_markup=markup)
        return QUESTIONS
    
    # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–µ–Ω—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    total = sum(context.user_data['answers'])
    result = "üîç *–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã* üîç\n\n"
    
    if total >= 6:
        result += (
            "üöÄ *–û—Ç–ª–∏—á–Ω—ã–µ –∑–∞–¥–∞—Ç–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞!*\n\n"
            "–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã—Å–æ–∫—É—é –ø—Ä–µ–¥—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å –∫ QA. "
            "–ß—Ç–æ–±—ã –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —ç—Ç–æ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é:\n\n"
            "üëâ –ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ Telegram [@Dmitrii_Fursa8](https://t.me/Dmitrii_Fursa8)\n\n"
            "–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª: [QA Mentor](https://t.me/qa_mentor)"
        )
    elif total == 5:
        result += (
            "üåü *–•–æ—Ä–æ—à–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª!*\n\n"
            "–£ —Ç–µ–±—è –µ—Å—Ç—å –±–∞–∑–æ–≤—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞. "
            "–ß—Ç–æ–±—ã —Ä–∞–∑–≤–∏—Ç—å –∏—Ö –¥–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è:\n\n"
            "üëâ –ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ Telegram [@Dmitrii_Fursa8](https://t.me/Dmitrii_Fursa8)"
        )
    else:
        result += (
            "üí° *–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ü–û –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —Ç–≤–æ–∏–º –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–∑–≤–∞–Ω–∏–µ–º, –Ω–æ —ç—Ç–æ –Ω–µ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ IT –Ω–µ –¥–ª—è —Ç–µ–±—è!*\n\n"
            "–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å:\n"
            "‚Ä¢ –°—Ç–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–æ–º –∏ –≤–æ–π—Ç–∏ –≤ IT\n"
            "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é\n"
            "‚Ä¢ –û—Å–≤–æ–∏—Ç—å –Ω–∞–≤—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–∫—Ä–æ—é—Ç –¥–≤–µ—Ä–∏ –≤ –º–∏—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π\n\n"
            "üëâ –ü–∏—à–∏ –º–Ω–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å: [@Dmitrii_Fursa8](https://t.me/Dmitrii_Fursa8)\n"
            "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞—á–∞—Ç—å –∫–∞—Ä—å–µ—Ä—É –≤ IT, –¥–∞–∂–µ –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç–≤–æ–µ!"
        )
    
    await update.message.reply_text(
        result,
        parse_mode="Markdown",
        disable_web_page_preview=True,
        reply_markup=ReplyKeyboardRemove()
    )
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
    await update.message.reply_text(
        "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â–µ —Ä–∞–∑?",
        reply_markup=ReplyKeyboardMarkup([["/start"]], one_time_keyboard=True)
    )
    
    logger.info(f"User completed test with score: {total}")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=ReplyKeyboardRemove())
    logger.info("Test canceled by user")
    return ConversationHandler.END

def main() -> None:
    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º health-—ç–Ω–¥–ø–æ–∏–Ω—Ç
    application.add_handler(CommandHandler("health", health))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler (—Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            QUESTIONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    
    application.add_handler(conv_handler)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—Ç –¥–ª—è Render
    port = int(os.environ.get("PORT", 10000))
    
    if WEBHOOK_URL:
        logger.info(f"Starting bot in WEBHOOK mode on port {port}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º keep-alive
        threading.Thread(
            target=keep_awake,
            args=(WEBHOOK_URL,),
            daemon=True
        ).start()
        
        application.run_webhook(
            listen="0.0.0.0",
            port=port,
            webhook_url=WEBHOOK_URL,
            secret_token=SECRET_TOKEN,
            drop_pending_updates=True
        )
    else:
        logger.info("Starting bot in POLLING mode")
        application.run_polling()

if __name__ == "__main__":
    logger.info(f"Starting {BOT_NAME} with token: {TOKEN[:5]}...{TOKEN[-5:]}")
    logger.info(f"WEBHOOK_URL: {WEBHOOK_URL or 'Not set, using POLLING'}")
    main()
