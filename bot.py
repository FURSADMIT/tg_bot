import os
import logging
import threading
import requests
import time
from flask import Flask, jsonify
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton, MenuButtonCommands
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
PORT = int(os.environ.get('PORT', 10000))
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
SECRET_TOKEN = os.getenv('SECRET_TOKEN', 'default-secret-token')
BOT_NAME = "@QaPollsBot"
TG_LINK = "https://t.me/Dmitrii_Fursa8"
VK_LINK = "https://m.vk.com/id119459855"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

@app.route('/health')
def health():
    """HTTP —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    return jsonify({"status": "ok", "bot": BOT_NAME}), 200

@app.route('/')
def home():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return jsonify({"message": "QA Polls Bot is running"}), 200

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
QUESTIONS = 1

# –í–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞
questions = [
    "*1.* *–ó–∞–º–µ—á–∞—é –æ–ø–µ—á–∞—Ç–∫–∏ –≤ —Ç–µ–∫—Å—Ç–∞—Ö*",
    "*2.* *–õ—é–±–ª—é —Ä–µ—à–∞—Ç—å –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏ –∏ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏*",
    "*3.* *–ú–æ–≥—É –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ*",
    "*4.* *–ò–∑—É—á–∞—è –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —Å—Ç–∞—Ä–∞—é—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤–æ –≤—Å–µ—Ö –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏—è—Ö*",
    "*5.* *–ù–∞—Å–∫–æ–ª—å–∫–æ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ IT-—Å—Ñ–µ—Ä–∞?*"
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ —Å —ç–º–æ–¥–∑–∏
reply_keyboard = [[
    KeyboardButton("1 üòû"),
    KeyboardButton("2 üòê"),
    KeyboardButton("3 üôÇ"),
    KeyboardButton("4 üòä"),
    KeyboardButton("5 üòç")
]]
markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)

# –¢–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û –∫—É—Ä—Å–µ"
ABOUT_COURSE_TEXT = """
üöÄ *–ú–æ–π –ø—É—Ç—å –≤ IT* üöÄ

–Ø –ø—Ä–æ—à–µ–ª –ø—É—Ç—å –æ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞ (Adidas/Reebok) –¥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ–¥–Ω–æ–π –∏–∑ –ª—É—á—à–∏—Ö IT-–∫–æ–º–ø–∞–Ω–∏–π!

–Ø –≤—Å–µ–≥–¥–∞ –ª—é–±–∏–ª —Å–≤–æ—é —Ä–∞–±–æ—Ç—É, –≤–∫–ª–∞–¥—ã–≤–∞–ª—Å—è –≤ –Ω–µ–µ –Ω–∞ –≤—Å–µ 100%, –Ω–æ –∑–∞ 8 –ª–µ—Ç –≤ —Ä–æ–∑–Ω–∏—Ü–µ –ø–æ–Ω—è–ª, —á—Ç–æ –Ω–µ –≥–æ—Ç–æ–≤ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –∂–∏–∑–Ω—å –º–∏–º–æ –∏ —Ö–æ—á—É –±–æ–ª—å—à–µ–≥–æ: –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –∫–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç, –ø–æ—ç—Ç–æ–º—É —Ä–µ—à–∏–ª —Å–º–µ–Ω–∏—Ç—å —Å—Ñ–µ—Ä—É.

üîç *–ö–∞–∫ —è –Ω–∞—á–∏–Ω–∞–ª –≤ IT:*
- –ü—Ä–æ—à–µ–ª —Ä—è–¥ –∫—É—Ä—Å–æ–≤ (–≤ —Ç–æ–º —á–∏—Å–ª–µ –ø–æ–ª—É—á–∏–ª –¥–∏–ø–ª–æ–º –≤ –æ–¥–Ω–æ–π –∏–∑ –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö —à–∫–æ–ª –Ω–∞ —Ä—ã–Ω–∫–µ –æ–Ω–ª–∞–π–Ω-–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è)
- –ò–∑—É—á–∏–ª —Å–æ—Ç–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–¥–µ–æ –∏ —Å—Ç–∞—Ç–µ–π
- –ù–∞ –∏—Ö –æ—Å–Ω–æ–≤–µ —Å–æ–∑–¥–∞–ª –æ–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Å–µ–±—è

–¢–æ–ª—å–∫–æ –±–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–æ–º—É –º–Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –∏ –∑–∞–∫—Ä–µ–ø–∏—Ç—å—Å—è –≤ –Ω–æ–≤–æ–π —Å—Ñ–µ—Ä–µ. –°–µ–π—á–∞—Å —è —Å–æ–±—Ä–∞–ª —Å–∞–º—ã–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –≥–æ—Ç–æ–≤ –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏.

üß™ *–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ* - —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–∞–∂–¥–æ–º—É –ø–æ—Ä–æ–≥ –≤—Ö–æ–¥–∞ –≤ IT.

üìö *–ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç –Ω–∞ –∫—É—Ä—Å–µ?*
- –¢–µ–æ—Ä–∏—è –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–Ω—è—Ç–∏—è (–æ–Ω–ª–∞–π–Ω)
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö –æ–±—É—á–µ–Ω–∏—è
- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º –∏ —É—Å–ø–µ—à–Ω–æ–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ

üíº *–ê –ø–æ—Å–ª–µ –∫—É—Ä—Å–∞:*
- –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ IT-–∫–æ–º–ø–∞–Ω–∏–π
- –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è –ó–ü, –î–ú–°, –ª—å–≥–æ—Ç—ã
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã
- –ö—Ä—É—Ç—ã–µ –æ—Ñ–∏—Å—ã —Å —Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–º–∏ –∑–∞–ª–∞–º–∏, –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –µ–¥–æ–π, –≤–µ—á–µ—Ä–∏–Ω–∫–∞–º–∏
- –ë–æ–ª—å—à–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–∞ –±—É–¥—É—â–µ–µ

üì© –ó–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏ –ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –≤—Å–µ —Ä–∞—Å—Å–∫–∞–∂—É!
"""

def keep_alive():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    time.sleep(15)
    logger.info("Starting keep-alive service")
    
    while True:
        try:
            if WEBHOOK_URL:
                health_url = f"{WEBHOOK_URL}/health"
                response = requests.get(health_url, timeout=10)
                logger.info(f"Keep-alive: Service status {response.status_code}")
            else:
                logger.info("Keep-alive: WEBHOOK_URL not set")
        except Exception as e:
            logger.error(f"Keep-alive error: {str(e)}")
        time.sleep(300)

def create_telegram_app():
    """–°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    application = Application.builder().token(TOKEN).build()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            QUESTIONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("health", telegram_health))
    application.add_handler(CommandHandler("about", about_course))
    application.add_error_handler(error_handler)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –±–æ—Ç–∞
    application.bot.set_my_commands([
        ("start", "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç"),
        ("about", "–û –∫—É—Ä—Å–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    ])
    
    return application

async def set_bot_menu(application: Application):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –±–æ—Ç–∞"""
    await application.bot.set_chat_menu_button(
        menu_button=MenuButtonCommands()
    )

async def telegram_health(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Telegram –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    await update.message.reply_text(f"‚úÖ {BOT_NAME} —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!")

async def about_course(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ"""
    try:
        await update.message.reply_text(
            ABOUT_COURSE_TEXT,
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
    except Exception as e:
        logger.error(f"Error in about command: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ.")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        user = update.message.from_user
        logger.info(f"Command /start received from user {user.id}")
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã
        context.user_data.clear()
        context.user_data['answers'] = []
        context.user_data['current_question_index'] = 0
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        welcome_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø {BOT_NAME}, –ø–æ–º–æ–≥—É –æ—Ü–µ–Ω–∏—Ç—å —Ç–≤–æ–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.\n\n"
            "üîπ –ù–∞–∂–º–∏ /start - —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç\n"
            "üîπ –ù–∞–∂–º–∏ /about - —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –∫—É—Ä—Å–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n\n"
            "–û—Ç–≤–µ—Ç—å –Ω–∞ 5 —Ç–µ–∑–∏—Å–æ–≤ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5:\n"
            "1 üòû - —Å–æ–≤—Å–µ–º –Ω–µ –æ–±–æ –º–Ω–µ\n"
            "5 üòç - —ç—Ç–æ —Ç–æ—á–Ω–æ –ø—Ä–æ –º–µ–Ω—è\n"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        await update.message.reply_text(
            welcome_text,
            parse_mode="Markdown"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await update.message.reply_text(
            questions[0],
            reply_markup=markup,
            parse_mode="Markdown"
        )
        
        return QUESTIONS
    except Exception as e:
        logger.error(f"Error in start command: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        user = update.message.from_user
        answer_text = update.message.text
        logger.info(f"User {user.id} answer: {answer_text}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–∏—Ñ—Ä—É –∏–∑ –æ—Ç–≤–µ—Ç–∞ (—É—á–∏—Ç—ã–≤–∞–µ–º —ç–º–æ–¥–∑–∏)
        answer = ''.join(filter(str.isdigit, answer_text))
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        answers = context.user_data.get('answers', [])
        current_question_index = context.user_data.get('current_question_index', 0)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
        if not answer or int(answer) < 1 or int(answer) > 5:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 5",
                reply_markup=markup
            )
            await update.message.reply_text(
                questions[current_question_index],
                reply_markup=markup,
                parse_mode="Markdown"
            )
            return QUESTIONS
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        answers.append(int(answer))
        context.user_data['answers'] = answers
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        next_question_index
