import os
import logging
import asyncio
from flask import Flask, jsonify, request
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
PORT = int(os.environ.get('PORT', 10000))
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
SECRET_TOKEN = os.getenv('SECRET_TOKEN', 'default-secret-token')
BOT_NAME = "@QaPollsBot"
TG_LINK = "https://t.me/Dmitrii_Fursa8"
VK_LINK = "https://m.vk.com/id119459855"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è Application
application = None

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
QUESTIONS = 1

# –í–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞
questions = [
    "1. –ó–∞–º–µ—á–∞—é –æ–ø–µ—á–∞—Ç–∫–∏ –≤ —Ç–µ–∫—Å—Ç–∞—Ö",
    "2. –õ—é–±–ª—é —Ä–µ—à–∞—Ç—å –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏ –∏ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏",
    "3. –ú–æ–≥—É –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ",
    "4. –ò–∑—É—á–∞—è –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —Å—Ç–∞—Ä–∞—é—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤–æ –≤—Å–µ—Ö –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏—è—Ö",
    "5. –ù–∞—Å–∫–æ–ª—å–∫–æ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ IT-—Å—Ñ–µ—Ä–∞?"
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
reply_keyboard = [["1 üòû", "2 üòê", "3 üòä", "4 üòÉ", "5 ü§©"]]
markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —è—Ä–∫–∏–º–∏ —ç–º–æ–¥–∑–∏
main_menu_keyboard = [
    [KeyboardButton("–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç üöÄ"), KeyboardButton("–û –∫—É—Ä—Å–µ ‚ú®")],
    [KeyboardButton("–ü–æ–º–æ—â—å ‚ùì")]
]
main_menu_markup = ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True)

@app.route('/health')
def health():
    return jsonify({"status": "ok", "bot": BOT_NAME}), 200

@app.route('/')
def home():
    return jsonify({"message": "QA Polls Bot is running"}), 200

@app.route('/webhook', methods=['POST'])
async def webhook():
    if request.headers.get('X-Telegram-Bot-Api-Secret-Token') != SECRET_TOKEN:
        return jsonify({"status": "forbidden"}), 403
    
    json_data = request.get_json()
    update = Update.de_json(json_data, application.bot)
    await application.update_queue.put(update)
    return jsonify({"status": "ok"}), 200

async def post_init(application: Application) -> None:
    await application.bot.set_webhook(
        url=f"{WEBHOOK_URL}/webhook",
        secret_token=SECRET_TOKEN
    )
    await application.bot.set_my_commands([
        ("start", "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç"),
        ("about", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ"),
        ("help", "–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É")
    ])

def create_telegram_app():
    global application
    application = Application.builder().token(TOKEN).post_init(post_init).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start), MessageHandler(filters.Regex("^–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç üöÄ$"), start)],
        states={
            QUESTIONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("about", about_course))
    application.add_handler(MessageHandler(filters.Regex("^–û –∫—É—Ä—Å–µ ‚ú®$"), about_course))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.Regex("^–ü–æ–º–æ—â—å ‚ùì$"), help_command))
    application.add_error_handler(error_handler)
    
    return application

async def show_menu(update: Update):
    await update.message.reply_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu_markup
    )

async def about_course(update: Update, context: ContextTypes.DEFAULT_TYPE):
    about_text = """
‚ú® *–û –∫—É—Ä—Å–µ* ‚ú®

–Ø –ø—Ä–æ—à–µ–ª –ø—É—Ç—å –æ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞ (Adidas/Reebok) –¥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ–¥–Ω–æ–π –∏–∑ –ª—É—á—à–∏—Ö IT-–∫–æ–º–ø–∞–Ω–∏–π!

üöÄ –ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç:
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–Ω—è—Ç–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞

üíº –ü–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è:
- –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç 80 000‚ÇΩ
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã
- –ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç –≤ IT

üì© –ü–∏—à–∏—Ç–µ –º–Ω–µ –≤ Telegram: [@Dmitrii_Fursa8](https://t.me/Dmitrii_Fursa8)
"""
    await update.message.reply_text(
        about_text,
        parse_mode="Markdown",
        disable_web_page_preview=True,
        reply_markup=main_menu_markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç üöÄ' –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞\n"
        "‚Ä¢ '–û –∫—É—Ä—Å–µ ‚ú®' - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
        "‚Ä¢ –î–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel",
        reply_markup=main_menu_markup
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        user = update.message.from_user
        logger.info(f"New test started by {user.id}")
        
        context.user_data.clear()
        context.user_data['answers'] = []
        context.user_data['current_question'] = 0
        
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø {BOT_NAME}, –ø–æ–º–æ–≥—É –æ—Ü–µ–Ω–∏—Ç—å —Ç–≤–æ–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.\n\n"
            "–û—Ç–≤–µ—Ç—å –Ω–∞ 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5:\n"
            "1 üòû - —Å–æ–≤—Å–µ–º –Ω–µ –æ–±–æ –º–Ω–µ\n"
            "5 ü§© - —ç—Ç–æ —Ç–æ—á–Ω–æ –ø—Ä–æ –º–µ–Ω—è",
            reply_markup=ReplyKeyboardRemove()
        )
        
        await ask_question(update, context)
        return QUESTIONS

    except Exception as e:
        logger.error(f"Start error: {str(e)}")
        await update.message.reply_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu_markup
        )
        return ConversationHandler.END

async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current = context.user_data['current_question']
    await update.message.reply_text(
        questions[current],
        reply_markup=markup
    )

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        user = update.message.from_user
        answer = update.message.text.split()[0]
        
        if not answer.isdigit() or int(answer) < 1 or int(answer) > 5:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç 1 –¥–æ 5")
            await ask_question(update, context)
            return QUESTIONS
        
        context.user_data['answers'].append(int(answer))
        context.user_data['current_question'] += 1
        
        if context.user_data['current_question'] < len(questions):
            await ask_question(update, context)
            return QUESTIONS
        
        await show_results(update, context)
        return ConversationHandler.END

    except Exception as e:
        logger.error(f"Handle answer error: {str(e)}")
        await update.message.reply_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.",
            reply_markup=main_menu_markup
        )
        return ConversationHandler.END

async def show_results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    total = sum(context.user_data['answers'])
    result = "üîç –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n\n"
    
    if total >= 20:
        result += "üöÄ –û—Ç–ª–∏—á–Ω—ã–µ –∑–∞–¥–∞—Ç–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∞!"
    elif total >= 15:
        result += "üëç –•–æ—Ä–æ—à–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª!"
    else:
        result += "üí° IT - –±–æ–ª—å—à–∞—è —Å—Ñ–µ—Ä–∞, –Ω–∞–π–¥–µ—Ç—Å—è –º–µ—Å—Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ!"
    
    result += f"\n\n–ù–∞–±—Ä–∞–Ω–æ –±–∞–ª–ª–æ–≤: {total}/25\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ: /about"
    
    await update.message.reply_text(
        result,
        reply_markup=main_menu_markup
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ë–Ω",
        reply_markup=main_menu_markup
    )
    return ConversationHandler.END

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error("Error:", exc_info=context.error)
    if update and update.effective_message:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üò¢ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu_markup
        )

async def run_bot():
    global application
    application = create_telegram_app()
    await application.initialize()
    await application.start()
    logger.info("Bot started in webhook mode")

async def shutdown():
    global application
    if application:
        await application.stop()
        await application.shutdown()

def run_flask():
    app.run(host='0.0.0.0', port=PORT)

def main():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    try:
        loop.run_until_complete(run_bot())
        run_flask()
    except KeyboardInterrupt:
        logger.info("Shutting down...")
        loop.run_until_complete(shutdown())
    finally:
        loop.close()

if __name__ == "__main__":
    logger.info(f"Starting {BOT_NAME}")
    main()
